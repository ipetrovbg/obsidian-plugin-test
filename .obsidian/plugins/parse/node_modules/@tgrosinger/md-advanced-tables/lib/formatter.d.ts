import { Alignment } from './alignment';
import { Options } from './options';
import { Table } from './table';
import { TableCell } from './table-cell';
import { TableRow } from './table-row';
export interface FormattedTable {
    /**
     * A formatted table object.
     */
    table: Table;
    /**
     * The common left margin of the formatted table.
     */
    marginLeft: string;
}
export interface CompletedTable {
    /**
     * A completed table object.
     */
    table: Table;
    /**
     * `true` if a delimiter row is inserted.
     */
    delimiterInserted: boolean;
}
/**
 * An object containing options for computing text widths.
 */
export interface TextWidthOptions {
    /**
     * Normalizes text before computing text widths.
     * @public
     */
    normalize: boolean;
    /**
     * A set of characters that should be treated as wide.
     * @public
     */
    wideChars: Set<string>;
    /**
     * A set of characters that should be treated as narrow.
     * @public
     */
    narrowChars: Set<string>;
    /**
     * Treats East Asian Ambiguous characters as wide.
     * @public
     */
    ambiguousAsWide: boolean;
}
/**
 * Creates a delimiter text.
 *
 * @private
 * @param width - Width of the horizontal bar of delimiter.
 * @throws {Error} Unknown alignment.
 */
export declare const _delimiterText: (alignment: Alignment, width: number) => string;
/**
 * Extends array size.
 *
 * @private
 * @param callback - Callback function to fill newly created cells.
 * @returns Extended array.
 */
export declare const _extendArray: <T>(arr: T[], size: number, callback: (i: number, arr: T[]) => T) => T[];
/**
 * Completes a table by adding missing delimiter and cells.
 * After completion, all rows in the table have the same width.
 *
 * @private
 *
 * @throws {Error} Empty table.
 */
export declare const completeTable: (table: Table, options: Options) => CompletedTable;
/**
 * Calculates the width of a text based on characters' EAW properties.
 *
 * @private
 *
 * @returns Calculated width of the text.
 */
export declare const _computeTextWidth: (text: string, options: TextWidthOptions) => number;
/**
 * Returns a aligned cell content.
 *
 * @throws {Error} Unknown alignment.
 * @throws {Error} Unexpected default alignment.
 */
export declare const _alignText: (text: string, width: number, alignment: Alignment, options: TextWidthOptions) => string;
/**
 * Just adds one space paddings to both sides of a text.
 *
 * @private
 */
export declare const _padText: (text: string) => string;
/**
 * Formats a table.
 *
 * @private
 */
export declare const _formatTable: (table: Table, options: Options) => FormattedTable;
/**
 * Formats a table weakly.
 * Rows are formatted independently to each other, cell contents are just trimmed and not aligned.
 * This is useful when using a non-monospaced font or dealing with wide tables.
 *
 * @private
 */
export declare const _weakFormatTable: (table: Table, options: Options) => FormattedTable;
/**
 * Represents table format type.
 *
 * - `FormatType.NORMAL` - Formats table normally.
 * - `FormatType.WEAK` - Formats table weakly, rows are formatted independently to each other, cell
 *   contents are just trimmed and not aligned.
 */
export declare enum FormatType {
    NORMAL = "normal",
    WEAK = "weak"
}
/**
 * Formats a table.
 *
 * @private
 *
 * @throws {Error} Unknown format type.
 */
export declare const formatTable: (table: Table, options: Options) => FormattedTable;
/**
 * Alters a column's alignment of a table.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param columnIndex - An index of the column.
 * @param alignment - A new alignment of the column.
 * @param options - An object containing options for completion.
 * @returns {Table} An altered table object.
 * If the column index is out of range, returns the original table.
 */
export declare const alterAlignment: (table: Table, columnIndex: number, alignment: Alignment, options: Options) => Table;
/**
 * Inserts a row to a table.
 * The row is always inserted after the header and the delimiter rows, even if the index specifies
 * the header or the delimiter.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param rowIndex - An row index at which a new row will be inserted.
 * @param row - A table row to be inserted.
 * @returns An altered table obejct.
 */
export declare const insertRow: (table: Table, rowIndex: number, row: TableRow) => Table;
/**
 * Deletes a row in a table.
 * If the index specifies the header row, the cells are emptied but the row will not be removed.
 * If the index specifies the delimiter row, it does nothing.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param rowIndex - An index of the row to be deleted.
 * @returns An altered table obejct.
 */
export declare const deleteRow: (table: Table, rowIndex: number) => Table;
/**
 * Moves a row at the index to the specified destination.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param rowIndex - Index of the row to be moved.
 * @param destIndex - Index of the destination.
 * @returns An altered table object.
 */
export declare const moveRow: (table: Table, rowIndex: number, destIndex: number) => Table;
/**
 * Inserts a column to a table.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param columnIndex - An column index at which the new column will be inserted.
 * @param column - An array of cells.
 * @param options - An object containing options for completion.
 * @returns An altered table obejct.
 */
export declare const insertColumn: (table: Table, columnIndex: number, column: TableCell[], options: Options) => Table;
/**
 * Deletes a column in a table.
 * If there will be no columns after the deletion, the cells are emptied but the column will not be
 * removed.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param columnIndex - An index of the column to be deleted.
 * @param options - An object containing options for completion.
 * @returns An altered table object.
 */
export declare const deleteColumn: (table: Table, columnIndex: number, options: Options) => Table;
/**
 * Moves a column at the index to the specified destination.
 *
 * @private
 * @param table - A completed non-empty table.
 * @param columnIndex - Index of the column to be moved.
 * @param destIndex - Index of the destination.
 * @returns An altered table object.
 */
export declare const moveColumn: (table: Table, columnIndex: number, destIndex: number) => Table;
