"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const calc_1 = require("./calc/calc");
const focus_1 = require("./focus");
const point_1 = require("./point");
const range_1 = require("./range");
/**
 * A `Table` object represents a table.
 *
 * @private
 */
class Table {
    /**
     * Creates a new `Table` object.
     *
     * @param rows - An array of rows that the table contains.
     * @param formulas - An array of formulas attached to the table.
     */
    constructor(rows) {
        this._rows = rows.slice();
    }
    /**
     * Gets the number of rows in the table.
     *
     * @returns The number of rows.
     */
    getHeight() {
        return this._rows.length;
    }
    /**
     * Gets the maximum width of the rows in the table.
     *
     * @returns The maximum width of the rows.
     */
    getWidth() {
        return this._rows
            .map((row) => row.getWidth())
            .reduce((x, y) => Math.max(x, y), 0);
    }
    /**
     * Gets the width of the header row.
     * Assumes that it is called on a valid table with a header row.
     *
     * @returns The width of the header row
     */
    getHeaderWidth() {
        return this._rows[0].getWidth();
    }
    /**
     * Gets the rows that the table contains.
     *
     * @returns An array of the rows.
     */
    getRows() {
        return this._rows.slice();
    }
    /**
     * Gets the delimiter row of the table.
     *
     * @returns The delimiter row; `undefined` if there is not delimiter row.
     */
    getDelimiterRow() {
        const row = this._rows[1];
        if (row === undefined) {
            return undefined;
        }
        if (row.isDelimiter()) {
            return row;
        }
        return undefined;
    }
    /**
     * Gets a cell at the specified index.
     *
     * @param rowIndex - Row index of the cell.
     * @param columnIndex - Column index of the cell.
     * @returns The cell at the specified index; `undefined` if not found.
     */
    getCellAt(rowIndex, columnIndex) {
        const row = this._rows[rowIndex];
        if (row === undefined) {
            return undefined;
        }
        return row.getCellAt(columnIndex);
    }
    /**
     * Gets the cell at the focus.
     *
     * @param focus - Focus object.
     * @returns The cell at the focus; `undefined` if not found.
     */
    getFocusedCell(focus) {
        return this.getCellAt(focus.row, focus.column);
    }
    /**
     * Converts the table to an array of text representations of the rows.
     *
     * @returns An array of text representations of the rows.
     */
    toLines() {
        return this._rows.map((row) => row.toText());
    }
    /**
     * Sets a cell in the table to a new value, returning a copy of the table
     * with the modified value.
     *
     * If an invalid index is provided, the table will be unchanged.
     */
    setCellAt(rowIndex, columnIndex, value) {
        const rows = this.getRows(); // a copy
        rows[rowIndex] = rows[rowIndex].setCellAt(columnIndex, value);
        return new Table(rows);
    }
    /**
     * Computes a focus from a point in the text editor.
     *
     * @param pos - A point in the text editor.
     * @param rowOffset - The row index where the table starts in the text editor.
     * @returns A focus object that corresponds to the specified point;
     * `undefined` if the row index is out of bounds.
     */
    focusOfPosition(pos, rowOffset) {
        const rowIndex = pos.row - rowOffset;
        const row = this._rows[rowIndex];
        if (row === undefined) {
            return undefined;
        }
        if (pos.column < row.marginLeft.length + 1) {
            return new focus_1.Focus(rowIndex, -1, pos.column);
        }
        const cellWidths = row.getCells().map((cell) => cell.rawContent.length);
        let columnPos = row.marginLeft.length + 1; // left margin + a pipe
        let columnIndex = 0;
        for (; columnIndex < cellWidths.length; columnIndex++) {
            if (columnPos + cellWidths[columnIndex] + 1 > pos.column) {
                break;
            }
            columnPos += cellWidths[columnIndex] + 1;
        }
        const offset = pos.column - columnPos;
        return new focus_1.Focus(rowIndex, columnIndex, offset);
    }
    /**
     * Computes a position in the text editor from a focus.
     *
     * @param focus - A focus object.
     * @param rowOffset - The row index where the table starts in the text editor.
     * @returns A position in the text editor that corresponds to the focus;
     * `undefined` if the focused row  is out of the table.
     */
    positionOfFocus(focus, rowOffset) {
        const row = this._rows[focus.row];
        if (row === undefined) {
            return undefined;
        }
        const rowPos = focus.row + rowOffset;
        if (focus.column < 0) {
            return new point_1.Point(rowPos, focus.offset);
        }
        const cellWidths = row.getCells().map((cell) => cell.rawContent.length);
        const maxIndex = Math.min(focus.column, cellWidths.length);
        let columnPos = row.marginLeft.length + 1;
        for (let columnIndex = 0; columnIndex < maxIndex; columnIndex++) {
            columnPos += cellWidths[columnIndex] + 1;
        }
        return new point_1.Point(rowPos, columnPos + focus.offset);
    }
    /**
     * Computes a selection range from a focus.
     *
     * @param focus - A focus object.
     * @param rowOffset - The row index where the table starts in the text editor.
     * @returns A range to be selected that corresponds to the focus;
     * `undefined` if the focus does not specify any cell or the specified cell is empty.
     */
    selectionRangeOfFocus(focus, rowOffset) {
        const row = this._rows[focus.row];
        if (row === undefined) {
            return undefined;
        }
        const cell = row.getCellAt(focus.column);
        if (cell === undefined) {
            return undefined;
        }
        if (cell.content === '') {
            return undefined;
        }
        const rowPos = focus.row + rowOffset;
        const cellWidths = row.getCells().map((cell) => cell.rawContent.length);
        let columnPos = row.marginLeft.length + 1;
        for (let columnIndex = 0; columnIndex < focus.column; columnIndex++) {
            columnPos += cellWidths[columnIndex] + 1;
        }
        columnPos += cell.paddingLeft;
        return new range_1.Range(new point_1.Point(rowPos, columnPos), new point_1.Point(rowPos, columnPos + cell.content.length));
    }
    /**
     * Evaluate the formula, applying the results to this table and returning the
     * changes as a new table.
     */
    applyFormulas(formulaLines) {
        return calc_1.parseAndApply(formulaLines, this);
    }
}
exports.Table = Table;
