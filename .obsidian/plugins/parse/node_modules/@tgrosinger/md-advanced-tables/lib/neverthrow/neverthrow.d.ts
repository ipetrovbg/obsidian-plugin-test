/**
 * Retrieved from
 *   https://github.com/supermacro/neverthrow
 *
 * MIT License
 * Copyright (c) 2019 Giorgio Delgado
 */
export declare type Result<T, E> = Ok<T, E> | Err<T, E>;
export declare const ok: <T, E>(value: T) => Ok<T, E>;
export declare const err: <T, E>(err: E) => Err<T, E>;
export declare class Ok<T, E> {
    readonly value: T;
    constructor(value: T);
    isOk(): this is Ok<T, E>;
    isErr(): this is Err<T, E>;
    map<A>(f: (t: T) => A): Result<A, E>;
    mapErr<U>(_f: (e: E) => U): Result<T, U>;
    andThen<U>(f: (t: T) => Result<U, E>): Result<U, E>;
    unwrapOr(_v: T): T;
    match: <A>(ok: (t: T) => A, _err: (e: E) => A) => A;
    _unsafeUnwrap(): T;
    _unsafeUnwrapErr(): E;
}
export declare class Err<T, E> {
    readonly error: E;
    constructor(error: E);
    isOk(): this is Ok<T, E>;
    isErr(): this is Err<T, E>;
    map<A>(_f: (t: T) => A): Result<A, E>;
    mapErr<U>(f: (e: E) => U): Result<T, U>;
    andThen<U>(_f: (t: T) => Result<U, E>): Result<U, E>;
    unwrapOr(v: T): T;
    match: <A>(_ok: (t: T) => A, err: (e: E) => A) => A;
    _unsafeUnwrap(): T;
    _unsafeUnwrapErr(): E;
}
