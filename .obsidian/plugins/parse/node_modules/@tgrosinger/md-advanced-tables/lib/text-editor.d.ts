import { Point } from './point';
import { Range } from './range';
/**
 * The `ITextEditor` represents an interface to a text editor.
 *
 * @interface
 */
export declare class ITextEditor {
    /**
     * Gets the current cursor position.
     *
     * @returns A point object that represents the cursor position.
     */
    getCursorPosition(): Point;
    /**
     * Sets the cursor position to a specified one.
     */
    setCursorPosition(pos: Point): void;
    /**
     * Sets the selection range.
     * This method also expects the cursor position to be moved as the end of the selection range.
     */
    setSelectionRange(range: Range): void;
    /**
     * Gets the last row index of the text editor.
     */
    getLastRow(): number;
    /**
     * Checks if the editor accepts a table at a row to be editted.
     * It should return `false` if, for example, the row is in a code block (not Markdown).
     *
     * @param row - A row index in the text editor.
     * @returns `true` if the table at the row can be editted.
     */
    acceptsTableEdit(row: number): boolean;
    /**
     * Gets a line string at a row.
     *
     * @param row - Row index, starts from `0`.
     * @returns The line at the specified row.
     * The line must not contain an EOL like `"\n"` or `"\r"`.
     */
    getLine(row: number): string;
    /**
     * Inserts a line at a specified row.
     *
     * @param row - Row index, starts from `0`.
     * @param line - A string to be inserted.
     * This must not contain an EOL like `"\n"` or `"\r"`.
     */
    insertLine(row: number, line: string): void;
    /**
     * Deletes a line at a specified row.
     *
     * @param row - Row index, starts from `0`.
     */
    deleteLine(row: number): void;
    /**
     * Replace lines in a specified range.
     *
     * @param startRow - Start row index, starts from `0`.
     * @param endRow - End row index.
     * Lines from `startRow` to `endRow - 1` is replaced.
     * @param lines - An array of string.
     * Each strings must not contain an EOL like `"\n"` or `"\r"`.
     */
    replaceLines(startRow: number, endRow: number, lines: string[]): void;
    /**
     * Batches multiple operations as a single undo/redo step.
     *
     * @param func - A callback function that executes some operations on the text editor.
     */
    transact(func: () => void): void;
}
