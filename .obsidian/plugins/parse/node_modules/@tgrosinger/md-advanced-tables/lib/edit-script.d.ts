import { ITextEditor } from './text-editor';
/**
 * The `Insert` class represents an insertion of a line.
 *
 * @private
 */
export declare class Insert {
    /**
     * Row index, starts from `0`.
     */
    readonly row: number;
    /**
     * A string to be inserted.
     */
    readonly line: string;
    /**
     * Creats a new `Insert` object.
     *
     * @param row - Row index, starts from `0`.
     * @param line - A string to be inserted at the row.
     */
    constructor(row: number, line: string);
}
/**
 * The `Delete` class represents a deletion of a line.
 *
 * @private
 */
export declare class Delete {
    /**
     * Row index, starts from `0`.
     */
    readonly row: number;
    /**
     * Creates a new `Delete` object.
     *
     * @param row - Row index, starts from `0`.
     */
    constructor(row: number);
}
/**
 * Applies a command to the text editor.
 *
 * @private
 * @param textEditor - An interface to the text editor.
 * @param command - A command.
 * @param rowOffset - Offset to the row index of the command.
 */
export declare const _applyCommand: (textEditor: ITextEditor, command: Insert | Delete, rowOffset: number) => void;
/**
 * Apply an edit script (array of commands) to the text editor.
 *
 * @private
 * @param textEditor - An interface to the text editor.
 * @param script - An array of commands.
 * The commands are applied sequentially in the order of the array.
 * @param rowOffset - Offset to the row index of the commands.
 */
export declare const applyEditScript: (textEditor: ITextEditor, script: Insert[] | Delete[], rowOffset: number) => void;
/**
 * Computes the shortest edit script between two arrays of strings.
 *
 * @private
 * @param from - An array of string the edit starts from.
 * @param to - An array of string the edit goes to.
 * @param [limit=-1] - Upper limit of edit distance to be searched.
 * If negative, there is no limit.
 * @returns The shortest edit script that turns `from` into `to`;
 * `undefined` if no edit script is found in the given range.
 */
export declare const shortestEditScript: (from: string[], to: string[], limit?: number) => (Insert | Delete)[] | undefined;
