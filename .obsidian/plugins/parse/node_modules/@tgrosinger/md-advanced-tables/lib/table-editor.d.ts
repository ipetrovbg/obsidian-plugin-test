import { Alignment } from './alignment';
import { Focus } from './focus';
import { FormattedTable } from './formatter';
import { Options } from './options';
import { Range } from './range';
import { Table } from './table';
import { ITextEditor } from './text-editor';
export declare enum SortOrder {
    Ascending = "ascending",
    Descending = "descending"
}
/**
 * Creates a regular expression object that matches a table row.
 *
 * @param leftMarginChars - A set of additional left margin characters.
 * A pipe `|`, a backslash `\`, and a backquote will be ignored.
 * @returns A regular expression object that matches a table row.
 */
export declare const _createIsTableRowRegex: (leftMarginChars: Set<string>) => RegExp;
export declare const _createIsTableFormulaRegex: (leftMarginChars: Set<string>) => RegExp;
interface TableInfo {
    /**
     * The range of the table
     */
    range: Range;
    /**
     * An array of lines in the range.
     */
    lines: string[];
    /**
     * An array of formula lines after the range.
     */
    formulaLines: string[];
    /**
     * A table object read from the text editor.
     */
    table: Table;
    /**
     * A focus object that represents the current cursor position in the table.
     */
    focus: Focus;
}
/**
 * Computes new focus offset from information of completed and formatted tables.
 *
 * @private
 * @param focus - A focus.
 * @param table - A completed but not formatted table with original cell contents.
 * @param formatted - Information of the formatted table.
 * @param moved - Indicates whether the focus position is moved by a command or not.
 */
export declare const _computeNewOffset: (focus: Focus, table: Table, formatted: FormattedTable, moved: boolean) => number;
/**
 * The `TableEditor` class is at the center of the markdown-table-editor.
 * When a command is executed, it reads a table from the text editor, does some operation on the
 * table, and then apply the result to the text editor.
 *
 * To use this class, the text editor (or an interface to it) must implement {@link ITextEditor}.
 */
export declare class TableEditor {
    private readonly _textEditor;
    private _scActive;
    private _scTablePos?;
    private _scStartFocus?;
    private _scLastFocus?;
    /**
     * Creates a new table editor instance.
     *
     * @param textEditor - A text editor interface.
     */
    constructor(textEditor: ITextEditor);
    /**
     * Resets the smart cursor.
     * Call this method when the table editor is inactivated.
     */
    resetSmartCursor(): void;
    /**
     * Checks if the cursor is in a table row.
     * This is useful to check whether the table editor should be activated or not.
     *
     * @returns `true` if the cursor is in a table row.
     */
    cursorIsInTable(options: Options): boolean;
    /**
     * Finds a table under the current cursor position.
     *
     * @returns undefined if there is no table or the determined focus is invalid.
     */
    _findTable(options: Options): TableInfo | undefined;
    /**
     * Finds a table and does an operation with it.
     *
     * @private
     * @param func - A function that does some operation on table information obtained by
     * {@link TableEditor#_findTable}.
     */
    _withTable<T>(options: Options, func: (tableInfo: TableInfo) => T): T | undefined;
    /**
     * Updates lines in a given range in the text editor.
     *
     * @private
     * @param startRow - Start row index, starts from `0`.
     * @param endRow - End row index.
     * Lines from `startRow` to `endRow - 1` are replaced.
     * @param newLines - New lines.
     * @param [oldLines=undefined] - Old lines to be replaced.
     */
    _updateLines(startRow: number, endRow: number, newLines: string[], oldLines?: string[] | undefined): void;
    /**
     * Moves the cursor position to the focused cell,
     *
     * @private
     * @param startRow - Row index where the table starts in the text editor.
     * @param table - A table.
     * @param focus - A focus to which the cursor will be moved.
     */
    _moveToFocus(startRow: number, table: Table, focus: Focus): void;
    /**
     * Selects the focused cell.
     * If the cell has no content to be selected, then just moves the cursor position.
     *
     * @private
     * @param startRow - Row index where the table starts in the text editor.
     * @param table - A table.
     * @param focus - A focus to be selected.
     */
    _selectFocus(startRow: number, table: Table, focus: Focus): void;
    /**
     * Formats the table under the cursor.
     */
    format(options: Options): void;
    /**
     * Formats and escapes from the table.
     */
    escape(options: Options): void;
    /**
     * Alters the alignment of the focused column.
     */
    alignColumn(alignment: Alignment, options: Options): void;
    /**
     * Selects the focused cell content.
     */
    selectCell(options: Options): void;
    /**
     * Moves the focus to another cell.
     *
     * @param rowOffset - Offset in row.
     * @param columnOffset - Offset in column.
     */
    moveFocus(rowOffset: number, columnOffset: number, options: Options): void;
    /**
     * Moves the focus to the next cell.
     */
    nextCell(options: Options): void;
    /**
     * Moves the focus to the previous cell.
     */
    previousCell(options: Options): void;
    /**
     * Moves the focus to the next row.
     */
    nextRow(options: Options): void;
    /**
     * Inserts an empty row at the current focus.
     */
    insertRow(options: Options): void;
    /**
     * Deletes a row at the current focus.
     */
    deleteRow(options: Options): void;
    /**
     * Moves the focused row by the specified offset.
     *
     * @param offset - An offset the row is moved by.
     */
    moveRow(offset: number, options: Options): void;
    evaluateFormulas(options: Options): Error | undefined;
    /**
     * Sorts rows alphanumerically using the column at the current focus.
     */
    sortRows(sortOrder: SortOrder, options: Options): void;
    /**
     * Inserts an empty column at the current focus.
     */
    insertColumn(options: Options): void;
    /**
     * Deletes a column at the current focus.
     */
    deleteColumn(options: Options): void;
    /**
     * Moves the focused column by the specified offset.
     *
     * @param offset - An offset the column is moved by.
     */
    moveColumn(offset: number, options: Options): void;
    /**
     * Formats all the tables in the text editor.
     */
    formatAll(options: Options): void;
    /**
     * Exports the table as a two dimensional string array
     */
    exportTable(withtHeaders: boolean, options: Options): string[][] | undefined;
    /**
     * Exports the table as a two dimensional string array
     */
    exportCSV(withtHeaders: boolean, options: Options): string | undefined;
    /**
     * Finds a table, completes it, then does an operation with it.
     *
     * @param func - A function that does some operation on table information obtained by
     * {@link TableEditor#_findTable}.
     */
    private withCompletedTable;
    /**
     * Formats the table and applies any changes based on the difference between
     * originalLines and the newTable. Should generally be the last function call
     * in a TableEditor function.
     */
    private formatAndApply;
}
export {};
