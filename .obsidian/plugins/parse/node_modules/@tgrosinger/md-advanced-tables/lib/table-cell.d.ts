import { Alignment } from './alignment';
/**
 * A `TableCell` object represents a table cell.
 *
 * @private
 */
export declare class TableCell {
    /**
     * Raw content of the cell.
     */
    readonly rawContent: string;
    /**
     * Trimmed content of the cell.
     */
    readonly content: string;
    /**
     * Width of the left padding of the cell.
     */
    readonly paddingLeft: number;
    /**
     * Width of the right padding of the cell.
     */
    readonly paddingRight: number;
    /**
     * Creates a new `TableCell` object.
     *
     * @param rawContent - Raw content of the cell.
     */
    constructor(rawContent: string);
    /**
     * Convers the cell to a text representation.
     *
     * @returns The raw content of the cell.
     */
    toText(): string;
    /**
     * Checks if the cell is a delimiter i.e. it only contains hyphens `-` with optional one
     * leading and trailing colons `:`.
     *
     * @returns `true` if the cell is a delimiter.
     */
    isDelimiter(): boolean;
    /**
     * Returns the alignment the cell represents.
     *
     * @returns The alignment the cell represents; `undefined` if the cell is not a delimiter.
     */
    getAlignment(): Alignment | undefined;
    /**
     * Computes a relative position in the trimmed content from that in the raw content.
     *
     * @param rawOffset - Relative position in the raw content.
     * @returns - Relative position in the trimmed content.
     */
    computeContentOffset(rawOffset: number): number;
    /**
     * Computes a relative position in the raw content from that in the trimmed content.
     *
     * @param contentOffset - Relative position in the trimmed content.
     * @returns - Relative position in the raw content.
     */
    computeRawOffset(contentOffset: number): number;
}
