import { Result } from '../neverthrow/neverthrow';
import { Table } from '../table';
import { Cell } from './ast_utils';
import { Value } from './results';
import { IToken } from 'ebnf';
export declare class Formula {
    private readonly source;
    private readonly destination;
    constructor(ast: IToken, table: Table);
    merge: (table: Table) => Result<Table, Error>;
}
export declare class Source {
    private readonly locationDescriptor;
    constructor(ast: IToken, table: Table);
    /**
     * getValue returns the evaluated value for this source recursively.
     */
    getValue: (table: Table, currentCell: Cell) => Result<Value, Error>;
}
export declare const parseAndApply: (formulaLines: string[], table: Table) => Result<Table, Error>;
/**
 * Parse the provided line, returning any found formulas. A single line may
 * contain zero or more formulas.
 *
 * @param line A line of the form `<!-- TBFM: {FORMULA}::{FORMULA} -->`
 */
export declare const parseFormula: (line: string, table: Table) => Result<Formula[], Error>;
