import { Result } from '../neverthrow/neverthrow';
import { Table } from '../table';
import { Source } from './calc';
import { Formatter } from './display_directive';
import { IToken } from 'ebnf';
export interface Destination {
    merge(source: Source, table: Table): Result<Table, Error>;
}
export declare const newDestination: (ast: IToken, table: Table, formatter: Formatter) => Result<Destination, Error>;
export declare class RowDestination implements Destination {
    private readonly row;
    private readonly formatter;
    constructor(ast: IToken, table: Table, formatter: Formatter);
    merge: (source: Source, table: Table) => Result<Table, Error>;
}
export declare class ColumnDestination implements Destination {
    private readonly column;
    private readonly formatter;
    constructor(ast: IToken, table: Table, formatter: Formatter);
    merge: (source: Source, table: Table) => Result<Table, Error>;
}
export declare class CellDestination implements Destination {
    private readonly row;
    private readonly column;
    private readonly formatter;
    constructor(ast: IToken, table: Table, formatter: Formatter);
    merge: (source: Source, table: Table) => Result<Table, Error>;
}
export declare class RangeDestination implements Destination {
    private readonly range;
    private readonly formatter;
    constructor(ast: IToken, table: Table, formatter: Formatter);
    merge: (source: Source, table: Table) => Result<Table, Error>;
}
