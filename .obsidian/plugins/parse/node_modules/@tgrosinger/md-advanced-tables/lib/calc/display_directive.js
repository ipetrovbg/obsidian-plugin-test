"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisplayDirective = exports.DefaultFormatter = void 0;
const ast_utils_1 = require("./ast_utils");
class DefaultFormatter {
    constructor() {
        this.format = (num) => {
            if (typeof num === 'string') {
                return num;
            }
            return num.toString();
        };
    }
}
exports.DefaultFormatter = DefaultFormatter;
class DisplayDirective {
    constructor(ast) {
        this.format = (num) => {
            if (typeof num === 'string') {
                const parsedNum = parseFloat(num);
                return parsedNum.toFixed(this.decimalLength);
            }
            return num.toFixed(this.decimalLength);
        };
        let typeError = ast_utils_1.checkType(ast, 'display_directive');
        if (typeError) {
            throw typeError;
        }
        let lengthError = ast_utils_1.checkChildLength(ast, 1);
        if (lengthError) {
            throw lengthError;
        }
        const displayDirectiveOption = ast.children[0];
        typeError = ast_utils_1.checkType(displayDirectiveOption, 'display_directive_option');
        if (typeError) {
            throw typeError;
        }
        lengthError = ast_utils_1.checkChildLength(displayDirectiveOption, 1);
        if (lengthError) {
            throw lengthError;
        }
        const formattingDirective = displayDirectiveOption.children[0];
        typeError = ast_utils_1.checkType(formattingDirective, 'formatting_directive');
        if (typeError) {
            throw typeError;
        }
        lengthError = ast_utils_1.checkChildLength(formattingDirective, 1);
        if (lengthError) {
            throw lengthError;
        }
        const formattingDirectiveLength = formattingDirective.children[0];
        typeError = ast_utils_1.checkType(formattingDirectiveLength, 'int');
        if (typeError) {
            throw typeError;
        }
        this.decimalLength = parseInt(formattingDirectiveLength.text);
    }
}
exports.DisplayDirective = DisplayDirective;
